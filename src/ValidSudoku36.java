import java.util.HashSet;
import java.util.Set;

//数独题
public class ValidSudoku36 {
    public static boolean isValidSudoku(char[][] board) {
        for (int i=0;i<9;i++){
            Set<Character> setheng = new HashSet<>();
            Set<Character> setshu = new HashSet<>();
            for (int j = 0;j<9;j++){
                if (board[i][j] != '.'){
                    if (!setheng.contains(board[i][j])){
                        setheng.add(board[i][j]);
                        System.out.println(setheng + "1");
                    }else if(setheng.contains(board[i][j])){
                        return false;
                    }
                }
                if (board[j][i] != '.'){
                    if (!setshu.contains(board[j][i])){
                        setshu.add(board[j][i]);
                        System.out.println(setshu+"111");
                    }else if(setshu.contains(board[j][i])){
                        return false;
                    }
                }
            }
        }
        Set<Character> setpie = new HashSet<>();
        Set<Character> setna = new HashSet<>();
        for (int i = 0;i<9;i++){
            if (board[i][i] != '.'&&!setna.contains(board[i][i])){
                setna.add(board[i][i]);
            }else if(setna.contains(board[i][i])){
                System.out.println('2');
                return false;
            }
            if (board[i][8-i] != '.'&&!setpie.contains(board[i][8-i])){
                setpie.add(board[i][8-i]);
            }else if(setpie.contains(board[i][8-i])){
                System.out.println('3');
                return false;
            }
        }

        return true;
    }

    public static void main(String[] args) {
        char[][] board = new char[9][9];
        board[0] = new char[]{'5','3','.','.','7','.','.','.','.'};
        board[1] = new char[]{'6','.','.','1','9','5','.','.','.'};
        board[2] = new char[]{'.','9','8','.','.','.','.','6','.'};
        board[3] = new char[]{'8','.','.','.','6','.','.','.','3'};
        board[4] = new char[]{'4','.','.','8','.','3','.','.','1'};
        board[5] = new char[]{'7','.','.','.','2','.','.','.','6'};
        board[6] = new char[]{'.','6','.','.','.','.','2','8','.'};
        board[7] = new char[]{'.','.','.','4','1','9','.','.','5'};
        board[8] = new char[]{'.','.','.','.','8','.','.','7','9'};

        System.out.println(isValidSudoku(board));


        /**
         * ['.','.','4','.','.','.','6','3','.'],
         * ['.','.','.','.','.','.','.','.','.'],
         * ['5','.','.','.','.','.','.','9','.'],
         * ['.','.','.','5','6','.','.','.','.'],
         * ['4','.','3','.','.','.','.','.','1'],
         * ['.','.','.','7','.','.','.','.','.'],
         * ['.','.','.','5','.','.','.','.','.'],
         * ['.','.','.','.','.','.','.','.','.'],
         * ['.','.','.','.','.','.','.','.','.']



         {'5','3','.','.','7','.','.','.','.'};
         {'6','.','.','1','9','5','.','.','.'};
         {'.','9','8','.','.','.','.','6','.'};
         {'8','.','.','.','6','.','.','.','3'};
         {'4','.','.','8','.','3','.','.','1'};
         {'7','.','.','.','2','.','.','.','6'};
         {'.','6','.','.','.','.','2','8','.'};
         {'.','.','.','4','1','9','.','.','5'};
         {'.','.','.','.','8','.','.','7','9'};




         [".",".",".",".",".",".",".",".","2"],
         [".",".",".",".",".",".","6",".","."],
         [".",".","1","4",".",".","8",".","."],
         [".",".",".",".",".",".",".",".","."],
         [".",".",".",".",".",".",".",".","."],
         [".",".",".",".","3",".",".",".","."],
         ["5",".","8","6",".",".",".",".","."],
         [".","9",".",".",".",".","4",".","."],
         [".",".",".",".","5",".",".",".","."]


         [\
         [".",".",".",".","5",".",".","1","."],
         [".","4",".","3",".",".",".",".","."],
         [".",".",".",".",".","3",".",".","1"],
         ["8",".",".",".",".",".",".","2","."],
         [".",".","2",".","7",".",".",".","."],
         [".","1","5",".",".",".",".",".","."],
         [".",".",".",".",".","2",".",".","."],
         [".","2",".","9",".",".",".",".","."],
         [".",".","4",".",".",".",".",".","."]]


         */


    }

}
